{"version":3,"sources":["GCD.js","soe.js"],"names":[],"mappings":";;;;;;;AAKA,IAAI,CAAC,GAAG,GAAG,UAAS,CAAC,EAAE,CAAC,EAAE;AACxB,SAAO,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;CACzC,CAAA;;;;;;;;ACFD,IAAI,CAAC,GAAG,GAAG,UAAU,CAAC,EAAE;AACtB,MAAI,aAAa,GAAG,EAAE,CAAC;AACvB,OAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;;AAC3B,iBAAa,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;GACtB;;AAAA,AAED,OAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;AAClD,QAAI,aAAa,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE;AAC1B,UAAI,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC;AAClB,aAAO,KAAK,IAAI,CAAC,EAAE;AACjB,qBAAa,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AACzB,aAAK,IAAI,CAAC,CAAC;OACZ;KACF;GACF;AACD,MAAI,MAAM,GAAG,EAAE,CAAC;AAChB,OAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;AAC1B,QAAI,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE;AACzB,YAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC;KAC/B;GACF;AACD,SAAO,MAAM,CAAC;CACf,CAAA","file":"all.js","sourcesContent":["/**\nThis method find the greatest common denominator of two objects using the modules axiom.\n@param {Number} The higher number a, of the two parameters where a > 0\n@param {Number} The lower number b, of the two parameters where b > 0\n*/\nMath.gcd = function(a, b) {\n  return b === 0 ? a : Math.gcd(b, a % b);\n}\n","/**\nThis function is known as the sieve of Eratosthenese https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes.\nThis function will find and return an Array of the prime numbers below a certain integer number n where n > 2.\n@param {Number} An integer number greater then 2\n*/\nMath.soe = function (n) {\n  var possibilities = {};\n  for (var i = 2; i <= n; i++) {//First we create the array of possible numbers\n    possibilities[i] = i;\n  }\n  //We only go here until i * i < n since earlier passes are eliminating based on this criteria. We can assume that i * i must be less then n to even begin to be compared.\n  for (var i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n    if (possibilities[i] !== 0) {\n      var count = i * i;\n      while (count <= n) {\n        possibilities[count] = 0;\n        count += i;\n      }\n    }\n  }\n  var primes = [];\n  for (var i = 2; i < n; i++) {\n    if (possibilities[i] != 0) {\n      primes.push(possibilities[i]);\n    }\n  }\n  return primes;\n}\n"],"sourceRoot":"/source/"}